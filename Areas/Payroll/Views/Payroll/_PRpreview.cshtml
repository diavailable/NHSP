@model List<NHSP.Areas.Payroll.Models.PreviewModel>

<div class="modal-body-preview">
    <div class="controls">
        <button id="zoomIn">Zoom In 🔍+</button>
        <button id="zoomOut">Zoom Out 🔍-</button>
        <button id="resetZoom">Reset 🔄</button>
    </div>
    <div class="zoom-container">      
        <div class="image-slider">
            @if (Model != null)
            {
                int index = 0;
                @foreach (var file in Model)
                {
                    <div class="image-wrapper @(index == 0 ? "active" : "hidden")" data-index="@index">
                        <div class="image-box">
                            <img class="zoomImage" src="@Url.Content("~/PayrollFiles/" + file.FileName)" alt="Payroll File"/>
                        </div>
                    </div>
                    index++;
                }
            }
            else
            {
                <p>No images available.</p>
            }
        </div>
    </div>
</div>

<div class="modal-footer d-flex flex-column">
    <div class="d-flex justify-content-center w-100 mb-2">
        <button id="prevImage" class="btn btn-primary me-2">⬅ Prev</button>

        <form asp-area="Payroll" asp-controller="Payroll" asp-action="Download" method="post">
            <input type="hidden" id="currentFileName" name="fileName" value="" />
            <button type="submit" class="btn btn-success mx-2">
                &DoubleDownArrow;
            </button>
        </form>

        <button id="nextImage" class="btn btn-primary ms-2">Next ➡</button>
    </div>

    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Close</button>
</div>


<script>
    $(document).ready(function () {
        let currentIndex = 0;
        const images = $(".image-wrapper");
        const totalImages = images.length;
        let zoomLevel = 1;
        let isDragging = false;
        let startX, startY, translateX = 0, translateY = 0;
        let initialDistance = 0;
        let isPinching = false;

        function showImage(index) {
            images.removeClass("active").hide();
            const activeImageWrapper = images.eq(index);
            activeImageWrapper.addClass("active").show();

            zoomLevel = 1;
            translateX = 0;
            translateY = 0;

            activeImageWrapper.find(".zoomImage").css({
                "transform": `scale(1) translate(0px, 0px)`,
                "width": "100%",
                "height": "100%",
                "max-height": "none",
                "max-width": "none",
                "object-fit": "contain"
            });

            const fileName = activeImageWrapper.find("img").attr("src").split("/").pop();
            $("#currentFileName").val(fileName);
        }

        $("#prevImage").click(function () {
            currentIndex = (currentIndex - 1 + totalImages) % totalImages;
            showImage(currentIndex);
        });

        $("#nextImage").click(function () {
            currentIndex = (currentIndex + 1) % totalImages;
            showImage(currentIndex);
        });

        $("#zoomIn").click(function () {
            zoomLevel += 0.5;
            $(".active .zoomImage").css("transform", `scale(${zoomLevel}) translate(${translateX}px, ${translateY}px)`);
        });

        $("#zoomOut").click(function () {
            if (zoomLevel > 1) {
                zoomLevel -= 0.5;
                $(".active .zoomImage").css("transform", `scale(${zoomLevel}) translate(${translateX}px, ${translateY}px)`);
            }
        });

        $("#resetZoom").click(function () {
            zoomLevel = 1;
            translateX = 0;
            translateY = 0;
            $(".active .zoomImage").css("transform", `scale(1) translate(0px, 0px)`);
        });

        $(".zoomImage").on("mousedown touchstart", function (e) {
            if (e.touches && e.touches.length === 2) {
                isPinching = true;
                initialDistance = getDistance(e.touches[0], e.touches[1]);
                return;
            }

            isDragging = true;
            startX = e.pageX || e.originalEvent.touches[0].pageX;
            startY = e.pageY || e.originalEvent.touches[0].pageY;
            $(this).css("cursor", "grabbing");
        });

        $(document).on("mousemove touchmove", function (e) {
            if (isPinching && e.touches.length === 2) {
                let newDistance = getDistance(e.touches[0], e.touches[1]);
                let zoomChange = (newDistance / initialDistance);
                zoomLevel = Math.max(1, Math.min(zoomLevel * zoomChange, 5)); 
                $(".active .zoomImage").css("transform", `scale(${zoomLevel}) translate(${translateX}px, ${translateY}px)`);
                initialDistance = newDistance;
                return;
            }

            if (!isDragging) return;

            let moveX = (e.pageX || e.originalEvent.touches[0].pageX) - startX;
            let moveY = (e.pageY || e.originalEvent.touches[0].pageY) - startY;

            let speedFactor = Math.max(zoomLevel, 1);
            translateX += moveX / speedFactor;
            translateY += moveY / speedFactor;

            $(".active .zoomImage").css("transform", `scale(${zoomLevel}) translate(${translateX}px, ${translateY}px)`);

            startX = e.pageX || e.originalEvent.touches[0].pageX;
            startY = e.pageY || e.originalEvent.touches[0].pageY;
        });

        $(document).on("mouseup touchend", function () {
            isDragging = false;
            isPinching = false;
            $(".zoomImage").css("cursor", "grab");
        });

        function getDistance(touch1, touch2) {
            let dx = touch1.pageX - touch2.pageX;
            let dy = touch1.pageY - touch2.pageY;
            return Math.sqrt(dx * dx + dy * dy);
        }

        showImage(currentIndex);
    });
</script>